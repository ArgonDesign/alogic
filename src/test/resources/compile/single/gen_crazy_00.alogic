// Complicated dependency between definitions in separate 'gen' loop bodies
network gen_crazy_00 {
  gen for (uint N < 8) {
    gen if (N == 0) {
      // The first input is 1 bit wide
      in u1 i#[N];
    } else {
      // Other inputs are 1 wider than the output with the previous number
      in uint(@bits(o#[N-1]) + 1) i#[N];
    }
  }

  // Outputs are same size as inputs
  gen for (uint N < 8) {
    out uint(@bits(i#[N])) o#[N];
  }

  // Irrelevant, just connect inputs to outputs
  gen for (uint N < 8) {
    i#[N] -> o#[N];
  }
}

// @fec/golden {{{
//  module gen_crazy_00(
//    input   wire        i__0,
//    output  wire        o__0,
//    input   wire [1:0]  i__1,
//    output  wire [1:0]  o__1,
//    input   wire [2:0]  i__2,
//    output  wire [2:0]  o__2,
//    input   wire [3:0]  i__3,
//    output  wire [3:0]  o__3,
//    input   wire [4:0]  i__4,
//    output  wire [4:0]  o__4,
//    input   wire [5:0]  i__5,
//    output  wire [5:0]  o__5,
//    input   wire [6:0]  i__6,
//    output  wire [6:0]  o__6,
//    input   wire [7:0]  i__7,
//    output  wire [7:0]  o__7
//  );
//    assign o__0 = i__0;
//    assign o__1 = i__1;
//    assign o__2 = i__2;
//    assign o__3 = i__3;
//    assign o__4 = i__4;
//    assign o__5 = i__5;
//    assign o__6 = i__6;
//    assign o__7 = i__7;
//  endmodule
// }}}
