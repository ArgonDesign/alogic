network gen_alt_func_3 {
  in u2 p_in_0;
  in u2 p_in_1;
  in u2 p_in_2;
  in u2 p_in_3;
  out u4 p_out_u_0;
  out u8 p_out_u_1;
  out i4 p_out_s_0;
  out i8 p_out_s_1;

  fsm inner {
    param bool SIGNED;
    param bool DOUBLE;

    in u2 p_i_0;
    in u2 p_i_1;
    gen if (DOUBLE) {
      out u8 p_o;
    } else {
      out u4 p_o;
    }

    void main() {
      goto doit;
    }

    gen if (SIGNED) {
      gen if (DOUBLE) {
        void doit() {
          p_o.write('$signed(p_i_0) * '$signed(p_i_0) * '$signed(p_i_1)* '$signed(p_i_1));
          goto doit;
        }
      } else {
        void doit() {
          p_o.write('$signed(p_i_0) * '$signed(p_i_1));
          goto doit;
        }
      }
    } else {
      gen if (DOUBLE) {
        void doit() {
          p_o.write('p_i_0 * 'p_i_0 * 'p_i_1 * 'p_i_1);
          goto doit;
        }
      } else {
        void doit() {
          p_o.write('p_i_0 * 'p_i_1);
          goto doit;
        }
      }
    }
  }

  inner_u_0 = new inner(SIGNED=false, DOUBLE=false);
  inner_s_0 = new inner(SIGNED=true, DOUBLE=false);

  p_in_0 -> inner_u_0.p_i_0, inner_s_0.p_i_0;
  p_in_1 -> inner_u_0.p_i_1, inner_s_0.p_i_1;

  inner_u_0.p_o -> p_out_u_0;
  inner_s_0.p_o -> p_out_s_0;

  inner_u_1 = new inner(SIGNED=false, DOUBLE=true);
  inner_s_1 = new inner(SIGNED=true, DOUBLE=true);

  p_in_2 -> inner_u_1.p_i_0, inner_s_1.p_i_0;
  p_in_3 -> inner_u_1.p_i_1, inner_s_1.p_i_1;

  inner_u_1.p_o -> p_out_u_1;
  inner_s_1.p_o -> p_out_s_1;
}
// @fec/golden {{{
//  module gen_alt_func_3(
//    input wire clk,
//    input wire rst,
//    input wire [1:0] p_in_0,
//    input wire [1:0] p_in_1,
//    input wire [1:0] p_in_2,
//    input wire [1:0] p_in_3,
//    output reg [3:0] p_out_u_0,
//    output reg [7:0] p_out_u_1,
//    output reg [3:0] p_out_s_0,
//    output reg [7:0] p_out_s_1
//  );
//
//    reg state;
//
//    always @(posedge clk) begin
//      if (rst) begin
//        state <= 1'b0;
//        p_out_u_0 <= 4'd0;
//        p_out_u_1 <= 8'd0;
//        p_out_s_0 <= 4'd0;
//        p_out_s_1 <= 8'd0;
//      end else if (state == 1'b0) begin
//        state <= 1'b1;
//      end else begin
//        p_out_u_0 <= {2'd0, p_in_0} *
//                     {2'd0, p_in_1};
//        p_out_u_1 <= {6'd0, p_in_2} *
//                     {6'd0, p_in_3} *
//                     {6'd0, p_in_2} *
//                     {6'd0, p_in_3};
//        p_out_s_0 <= $signed({{2{p_in_0[1]}}, p_in_0}) *
//                     $signed({{2{p_in_1[1]}}, p_in_1});
//        p_out_s_1 <= $signed({{6{p_in_2[1]}}, p_in_2}) *
//                     $signed({{6{p_in_3[1]}}, p_in_3}) *
//                     $signed({{6{p_in_2[1]}}, p_in_2}) *
//                     $signed({{6{p_in_3[1]}}, p_in_3});
//      end
//    end
//
//  endmodule
// }}}
