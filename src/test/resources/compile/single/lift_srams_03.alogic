(*liftsrams*)
fsm lift_srams_03 {
  in  u2 i;
  out u5 o = 0;

  struct s {
    u2   a;
    bool b;
    u2   c;
  }

  sram wire s storage[4];

  void main() {
    storage.read(i);
    fence;
    o = {storage.rdata.b, storage.rdata.c, storage.rdata.a};
    storage.write(i, {~i[1], i, ~i});
    fence;
  }
}
// @fec/golden {{{
//  module lift_srams_03(
//    input wire       clk,
//    input wire       rst,
//    input wire [1:0] i,
//    output reg [4:0] o,
//    output reg       sram__storage__ce,
//    output reg       sram__storage__we,
//    output reg [1:0] sram__storage__addr,
//    output reg [4:0] sram__storage__wdata,
//    input wire [4:0] sram__storage__rdata
//  );
//    reg       state_q;
//
//    always @(posedge clk) begin
//      if (rst) begin
//        state_q <= 1'b0;
//        o <= 5'd0;
//      end else begin
//        case (state_q)
//          1'd0: begin
//            state_q <= 1'd1;
//          end
//          default: begin
//            state_q <= 1'd0;
//            o <= {sram__storage__rdata[2], sram__storage__rdata[1:0], sram__storage__rdata[4:3]};
//          end
//        endcase
//      end
//    end
//
//    always @* begin
//      if (~state_q) begin
//        sram__storage__ce = 1'd1;
//        sram__storage__we = 1'd0;
//        sram__storage__addr = i;
//        sram__storage__wdata = 5'd0;
//      end else begin
//        sram__storage__ce = 1'd1;
//        sram__storage__we = 1'd1;
//        sram__storage__addr = i;
//        sram__storage__wdata = {~i[1], i, ~i};
//      end
//    end
//
//  endmodule
// }}}
// @manifest/sram-sizes {{{
//  [ {"width": 5, "depth": 4} ]
// }}}
