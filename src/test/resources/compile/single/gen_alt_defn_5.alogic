// @out-top: gen_alt_defn_5__STRANGE_0
network gen_alt_defn_5 {
  param bool STRANGE = false;

  // typedefs tnside gen to force resolving choices
  gen if (STRANGE) {
    typedef i1 i2_t;
    typedef i2 i4_t;
    typedef u1 u2_t;
    typedef u2 u4_t;
  } else {
    typedef i2 i2_t;
    typedef i4 i4_t;
    typedef u2 u2_t;
    typedef u4 u4_t;
  }

  in u2_t p_in_0;
  in u2_t p_in_1;
  out u4_t p_out_u;
  out i4_t p_out_s;

  fsm inner {
    param bool SIGNED;

    gen if (SIGNED) {
      struct i_t {i2_t f;}
      struct o_t {i4_t f;}
    } else {
      struct i_t {u2_t f;}
      struct o_t {u4_t f;}
    }

    in  i_t p_i_0;
    in  i_t p_i_1;
    out o_t p_o;

    void main() {
      p_o.write('p_i_0.f * 'p_i_1.f);
      fence;
    }
  }

  inner_u = new inner(SIGNED=false);
  inner_s = new inner(SIGNED=true);

  p_in_0 -> inner_u.p_i_0, inner_s.p_i_0;
  p_in_1 -> inner_u.p_i_1, inner_s.p_i_1;

  inner_u.p_o -> p_out_u;
  inner_s.p_o -> p_out_s;
}
// @fec-golden {{{
//  module gen_alt_defn_5__STRANGE_0(
//    input wire clk,
//    input wire rst,
//    input wire [1:0] p_in_0,
//    input wire [1:0] p_in_1,
//    output reg [3:0] p_out_u,
//    output reg [3:0] p_out_s
//  );
//
//    always @(posedge clk) begin
//      if (rst) begin
//        p_out_u <= 4'd0;
//        p_out_s <= 4'd0;
//      end else begin
//        p_out_u <= {2'd0, p_in_0} * {2'd0, p_in_1};
//        p_out_s <= $signed({{2{p_in_0[1]}}, p_in_0}) * $signed({{2{p_in_1[1]}}, p_in_1});
//      end
//    end
//
//  endmodule
// }}}
