network gen_const_01 {
  in  u3  i_a_0;
  in  u3  i_a_1;
  in  u3  i_b_0;
  in  u3  i_b_1;
  in  u3  i_b_2;

  out u3  o_a_0;
  out u3  o_a_1;
  out u3  o_b_0;
  out u3  o_b_1;
  out u3  o_b_2;

  fsm inner {
    param uint N;
    static assert N == 2 || N == 3;

    gen for (uint n < N) {
      const    u3 INCREMENT#[n] = N == 2 ? n + 1 : n + 3;
    }

    in       u3 i_0;
    out wire u3 o_0;
    in       u3 i_1;
    out wire u3 o_1;
    gen if (N == 3) {
      in       u3 i_2;
      out wire u3 o_2;
    }

    void main() {
      o_0 = i_0 + INCREMENT#[0];
      o_1 = i_1 + INCREMENT#[1];
      gen if (N == 3) {
        o_2 = i_2 + INCREMENT#[2];
      }
      fence;
    }
  }

  inner_a = new inner(2);

  i_a_0 -> inner_a.i_0; inner_a.o_0 -> o_a_0;
  i_a_1 -> inner_a.i_1; inner_a.o_1 -> o_a_1;

  inner_b = new inner(3);

  i_b_0 -> inner_b.i_0; inner_b.o_0 -> o_b_0;
  i_b_1 -> inner_b.i_1; inner_b.o_1 -> o_b_1;
  i_b_2 -> inner_b.i_2; inner_b.o_2 -> o_b_2;

}
// @fec/golden {{{
//  module gen_const_01(
//    input  wire [2:0] i_a_0,
//    input  wire [2:0] i_a_1,
//    input  wire [2:0] i_b_0,
//    input  wire [2:0] i_b_1,
//    input  wire [2:0] i_b_2,
//    output wire [2:0] o_a_0,
//    output wire [2:0] o_a_1,
//    output wire [2:0] o_b_0,
//    output wire [2:0] o_b_1,
//    output wire [2:0] o_b_2
//  );
//
//    assign o_a_0 = i_a_0 + 3'd1;
//    assign o_a_1 = i_a_1 + 3'd2;
//    assign o_b_0 = i_b_0 + 3'd3;
//    assign o_b_1 = i_b_1 + 3'd4;
//    assign o_b_2 = i_b_2 + 3'd5;
//
//  endmodule
// }}}

