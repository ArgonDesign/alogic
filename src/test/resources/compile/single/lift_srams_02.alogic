(* liftsrams *)
fsm lift_srams_02 {
  in  u2 i;
  out u4 o = 0;

  struct s {
    bool a;
    u2   b;
    bool c;
  }

  sram s storage[4];

  void main() {
    storage.read(i);
    fence;
    fence;
    o = {storage.rdata.c, storage.rdata.a, storage.rdata.b};
    storage.write(i, {~i, i});
    fence;
    fence;
  }
}
// @fec/golden {{{
//  module lift_srams_02(
//    input wire       clk,
//    input wire       rst,
//    input wire [1:0] i,
//    output reg [3:0] o,
//    output reg       sram__storage__ce,
//    output reg       sram__storage__we,
//    output reg [1:0] sram__storage__addr,
//    output reg [3:0] sram__storage__wdata,
//    input wire [3:0] sram__storage__rdata
//  );
//    reg [1:0] state_q;
//
//    always @(posedge clk) begin
//      if (rst) begin
//        state_q <= 2'b0;
//        o <= 4'd0;
//        sram__storage__ce <= 1'd0;
//        sram__storage__we <= 1'd0;
//        sram__storage__addr <= 2'd0;
//        sram__storage__wdata <= 4'd0;
//      end else begin
//        sram__storage__ce <= 1'd0;
//        case (state_q)
//          2'd0: begin
//            state_q <= 2'd1;
//            sram__storage__ce <= 1'd1;
//            sram__storage__we <= 1'd0;
//            sram__storage__addr <= i;
//            sram__storage__wdata <= 4'd0;
//          end
//          2'd1: begin
//            state_q <= 2'd2;
//          end
//          2'd2: begin
//            state_q <= 2'd3;
//            o <= {sram__storage__rdata[0], sram__storage__rdata[3], sram__storage__rdata[2:1]};
//            sram__storage__ce <= 1'd1;
//            sram__storage__we <= 1'd1;
//            sram__storage__addr <= i;
//            sram__storage__wdata <= {~i, i};
//          end
//          default: begin
//            state_q <= 2'd0;
//          end
//        endcase
//      end
//    end
//
//  endmodule
// }}}
// @manifest/sram-sizes {{{
//  [ {"width": 4, "depth": 4} ]
// }}}
