fsm sram_04 {
  in  u1 i;
  out u8 o = 0;

  sram u2[2][2] storage[2];

  void main() {
    storage.read(i);
    fence;
    fence;
    o = storage.rdata;
    storage.write(i, {8{i}});
    fence;
    fence;
  }
}
// @fec/smtc {{{
//  state 1
//  assume (= [golden.storage_q] [alogic.sram__storage.storage_q])
//  always 1
//  assert (= [golden.state_q] [alogic.state_q])
//  assert (= [golden.storage_q] [alogic.sram__storage.storage_q])
// }}}
// @fec/golden {{{
//  module sram_04(
//    input wire       clk,
//    input wire       rst,
//    input wire       i,
//    output reg [7:0] o
//  );
//    reg [1:0] state_q;
//    reg       addr_q;
//    reg [7:0] storage_q [1:0];
//    reg [7:0] data_q;
//
//    always @(posedge clk) begin
//      if (rst) begin
//        state_q <= 2'b0;
//        o <= 8'd0;
//      end else begin
//        case (state_q)
//          2'd0: begin
//            state_q <= 2'd1;
//            addr_q <= i;
//          end
//          2'd1: begin
//            state_q <= 2'd2;
//            data_q <= storage_q[addr_q];
//          end
//          2'd2: begin
//            state_q <= 2'd3;
//            o <= data_q;
//            addr_q <= i;
//            data_q <= {8{i}};
//          end
//          default: begin
//            state_q <= 2'd0;
//            storage_q[addr_q] <= data_q;
//          end
//        endcase
//      end
//    end
//
//  endmodule
// }}}
