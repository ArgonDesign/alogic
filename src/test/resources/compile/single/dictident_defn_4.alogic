// @top: dictident_defn_4()
// @out-top: dictident_defn_4__P_1
network dictident_defn_4 {
  param bool P = true;
  gen if (P) {
    gen for (uint N < 2) {
      typedef uint(N+1) i_t#[N];
      typedef uint(N+1) o_t#[N];
    }
  } else {
    gen for (uint N < 2) {
      typedef uint(N+10) i_t#[N];
      typedef uint(N+10) o_t#[N];
    }
  }
  in  i_t#[0] i_0;
  in  i_t#[1] i_1;
  out o_t#[0] o_0;
  out o_t#[1] o_1;
  i_0 -> o_0;
  i_1 -> o_1;
}
// @fec/golden {{{
//  module dictident_defn_4__P_1(
//    input  wire       i_0,
//    input  wire [1:0] i_1,
//    output wire       o_0,
//    output wire [1:0] o_1
//  );
//    assign o_0 = i_0;
//    assign o_1 = i_1;
//  endmodule
// }}}
