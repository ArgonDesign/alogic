struct unpacked_vector {
  param uint W;
  param uint N;

  static assert W > 0;
  static assert N > 0;

  typedef uint($clog2(N)) idx_t;
  typedef uint(W) elem_t;

  // Generate elements
  gen for (uint n < N) {
    elem_t v#[n];
  }

  // Getter
  elem_t get(idx_t idx) {
    case (idx) {
      gen for (uint n < N) {
        n : return v#[n];
      }
    }
  }

  // Setter
  void set(idx_t idx, elem_t value) {
    case (idx) {
      gen for (uint n < N) {
        n : v#[n] = value;
      }
    }
  }
}

fsm unpacked_vector_uint {
  in u2 i;
  out wire u4 o;

  unpacked_vector(W=4, N=3) z;

  void main() {
    o = z.get(i);
    z.set(i, o+1);
    fence;
  }
}
// @fec/mode: bmc
// @fec/solver: boolector
// @fec/golden {{{
//  module unpacked_vector_uint(
//    input  wire       clk,
//    input  wire       rst,
//    input  wire [1:0] i,
//    output wire [3:0] o
//  );
//    reg [3:0] q [2:0];
//
//    always @(posedge clk) begin
//      if (rst) begin
//        q[0] <= 4'd0;
//        q[1] <= 4'd0;
//        q[2] <= 4'd0;
//      end else begin
//        q[i] <= q[i] + 4'd1;
//      end
//    end
//
//    assign o = i < 2'd3 ? q[i] : 4'd0;
//  endmodule
// }}}
