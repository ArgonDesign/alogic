network gen_for_case_0 {
  in u4 p_i;

  out u4 p_o4;
  out u4 p_o9;

  fsm inner {
    param uint P;

    out u4 p_o;

    void main() {
      case (p_i) {
        gen for (u4 N = 1; N < P; N++) {
          N : p_o.write(p_i ^ N);
        }
        default: p_o.write(p_i);
      }
      fence;
    }
  }

  i_4 = new inner(P=4);
  i_9 = new inner(P=9);

  i_4.p_o -> p_o4;
  i_9.p_o -> p_o9;
}
// @fec/golden {{{
//  module gen_for_case_0(
//    input wire rst,
//    input wire clk,
//    input wire [3:0] p_i,
//    output reg [3:0] p_o4,
//    output reg [3:0] p_o9
//  );
//
//  always @(posedge clk) begin
//    if (rst) begin
//      p_o4 <= 4'd0;
//      p_o9 <= 4'd0;
//    end else begin
//      case (p_i)
//        4'd0: p_o4 <= p_i ^ 4'd0;
//        4'd1: p_o4 <= p_i ^ 4'd1;
//        4'd2: p_o4 <= p_i ^ 4'd2;
//        4'd3: p_o4 <= p_i ^ 4'd3;
//        default: p_o4 <= p_i;
//      endcase
//      case (p_i)
//        4'd0: p_o9 <= p_i ^ 4'd0;
//        4'd1: p_o9 <= p_i ^ 4'd1;
//        4'd2: p_o9 <= p_i ^ 4'd2;
//        4'd3: p_o9 <= p_i ^ 4'd3;
//        4'd4: p_o9 <= p_i ^ 4'd4;
//        4'd5: p_o9 <= p_i ^ 4'd5;
//        4'd6: p_o9 <= p_i ^ 4'd6;
//        4'd7: p_o9 <= p_i ^ 4'd7;
//        4'd8: p_o9 <= p_i ^ 4'd8;
//        default: p_o9 <= p_i;
//      endcase
//    end
//  end
//
//  endmodule
// }}}
