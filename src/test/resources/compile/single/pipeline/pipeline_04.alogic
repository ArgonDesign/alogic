network pipeline_04 {
  in  sync u2 i;
  out sync u2 o;

  pipeline bool p;
  pipeline bool q;

  new fsm a {
    out sync pipeline;
    void main() {
      {p, q} = i.read();
      out.write();
      fence;
    }
  }

  a -> b;

  new fsm b {
    in sync pipeline;
    out sync pipeline;
    void main() {
      in.read();
      out.write();
      fence;
    }
  }

  b -> c;

  new fsm c {
    in sync pipeline;
    void main() {
      in.read();
      o.write({q, p});
      fence;
    }
  }
}
// @fec/golden {{{
// module pipeline_04(
//    input   wire        clk,
//    input   wire        rst,
//    input   wire  [1:0] i,
//    input   wire        i__valid,
//    output  reg   [1:0] o,
//    output  reg         o__valid
// );
//
//    reg pa_q;
//    reg qa_q;
//    reg a__valid;
//    reg pb_q;
//    reg qb_q;
//    reg b__valid;
//
//    always @(posedge clk) begin
//      if (rst) begin
//        pa_q <= 1'b0;
//        qa_q <= 1'b0;
//        a__valid <= 1'b0;
//        pb_q <= 1'b0;
//        qb_q <= 1'b0;
//        b__valid <= 1'b0;
//        o <= 2'b0;
//        o__valid <= 1'b0;
//      end else begin
//        a__valid <= 1'b0;
//        if (i__valid) begin
//          {pa_q, qa_q} <= i;
//          a__valid <= 1'b1;
//        end
//        b__valid <= 1'b0;
//        if (a__valid) begin
//          {pb_q, qb_q} <= {pa_q, qa_q};
//          b__valid <= 1'b1;
//        end
//        o__valid <= 1'b0;
//        if (b__valid) begin
//          o <= {qb_q, pb_q};
//          o__valid <= 1'd1;
//        end
//      end
//    end
//
// endmodule
// }}}
