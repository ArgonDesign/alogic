network arbitrary_connects_dict_idents {

    gen for (uint i=1; i<=2; i++) {
        in  uint(i) in_gen#[i];
        out uint(i) out_gen#[i];
    }

    new network X {
        gen for (uint i=1; i<=2; i++) {
            in  uint(i) in_from_ext_gen#[i];
            out uint(i) out_to_Y_gen#[i];

            in_from_ext_gen#[i] -> out_to_Y_gen#[i];
        }
    }

    new fsm Y {
        gen for (uint i=1; i<=2; i++) {
            in  uint(i) in_from_X_gen#[i];
            out uint(i) out_to_ext_gen#[i];
        }

        void main() {
            gen for (uint i=1; i<=2; i++) {
                out_to_ext_gen#[i] = in_from_X_gen#[i];
            }
            fence;
        }
    }

    // Dict identifiers
    {in_gen#[1], in_gen#[2]}                     -> {X.in_from_ext_gen#[2], X.in_from_ext_gen#[1]};
    {X.out_to_Y_gen#[1], X.out_to_Y_gen#[2]}     -> {Y.in_from_X_gen#[2], Y.in_from_X_gen#[1]};
    {Y.out_to_ext_gen#[1], Y.out_to_ext_gen#[2]} -> {out_gen#[2], out_gen#[1]};

}
// @fec/golden {{{
//  module arbitrary_connects_dict_idents(
//
//    input  wire       clk,
//    input  wire       rst,
//
//    input  wire       in_gen__1,
//    input  wire [1:0] in_gen__2,
//    output reg        out_gen__1,
//    output reg  [1:0] out_gen__2
//  );
//
//  always @(posedge clk) begin
//    if (rst) begin
//      out_gen__1 <= 1'd0;
//      out_gen__2 <= 2'd0;
//    end else begin
//      out_gen__1 <= in_gen__1;
//      out_gen__2 <= in_gen__2;
//    end
//  end
//
//  endmodule
// }}}
