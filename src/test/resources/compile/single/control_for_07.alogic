fsm control_for_07 {
  in  bool i;
  in  bool j;
  out bool o = 0;
  in  bool a;
  in  bool b;
  out u3   x = 0;

  void main() {
    for (x = 0 ; j ; x++) {
      o = a;
      if (i) break; else if (j) continue;
      for (x = ~x ; j ; x += 2) {
        o = ~a;
        if (i) break; else if (j) continue;
        o = 0;
      }
    }
    for (x = 7 ; j ; x--) {
      o = b;
      if (i) break; else if (j) continue;
      for (x = -x ; j ; x -= 2) {
        o = ~b;
        if (i) break; else if (j) continue;
        o = 1;
      }
    }
  }
}
// @fec/smtc {{{
//  always 1
//  assert (= [golden.state_q] [alogic.state_q])
// }}}
// @fec/golden {{{
// module control_for_07(
//    input  wire  clk,
//    input  wire  rst,
//    input  wire  i,
//    input  wire  j,
//    output reg   o,
//    input  wire  a,
//    input  wire  b,
//    output reg  [2:0] x
// );
//
//    localparam [3:0] A_OUTER_TEST = 4'd0;
//    localparam [3:0] A_OUTER_HEAD = 4'd2;
//    localparam [3:0] A_INNER_TEST = 4'd3;
//    localparam [3:0] A_INNER_HEAD = 4'd4;
//    localparam [3:0] A_INNER_NEXT = 4'd5;
//    localparam [3:0] A_OUTER_LAST = 4'd1;
//    localparam [3:0] B_OUTER_TEST = 4'd7;
//    localparam [3:0] B_OUTER_HEAD = 4'd8;
//    localparam [3:0] B_INNER_TEST = 4'd9;
//    localparam [3:0] B_INNER_HEAD = 4'd10;
//    localparam [3:0] B_INNER_NEXT = 4'd11;
//    localparam [3:0] B_OUTER_LAST = 4'd6;
//
//    reg [3:0] state_q;
//
//    always @(posedge clk) begin
//      if (rst) begin
//        o <= 1'd0;
//        x <= 3'd0;
//        state_q <= A_OUTER_TEST;
//      end else begin
//        case (state_q)
//          A_OUTER_TEST: begin
//            x <= 3'd0;
//            if (j) begin
//              state_q <= A_OUTER_HEAD;
//            end else begin
//              state_q <= B_OUTER_TEST;
//            end
//          end
//          A_OUTER_HEAD: begin
//            o <= a;
//            if (i) begin
//              state_q <= B_OUTER_TEST;
//            end else if (j) begin
//              x <= x + 3'd1;
//            end else begin
//              state_q <= A_INNER_TEST;
//            end
//          end
//          A_INNER_TEST: begin
//            x <= ~x;
//            if (j) begin
//              state_q <= A_INNER_HEAD;
//            end else begin
//              state_q <= A_OUTER_LAST;
//            end
//          end
//          A_INNER_HEAD: begin
//            o <= ~a;
//            if (i) begin
//              state_q <= A_OUTER_LAST;
//            end else if (j) begin
//              x <= x + 3'd2;
//            end else begin
//              state_q <= A_INNER_NEXT;
//            end
//          end
//          A_INNER_NEXT: begin
//            o <= 1'd0;
//            x <= x + 3'd2;
//            if (j) begin
//              state_q <= A_INNER_HEAD;
//            end else begin
//              state_q <= A_OUTER_LAST;
//            end
//          end
//          A_OUTER_LAST: begin
//            x <= x + 3'd1;
//            if (j) begin
//              state_q <= A_OUTER_HEAD;
//            end else begin
//              state_q <= B_OUTER_TEST;
//            end
//          end
//          B_OUTER_TEST: begin
//            x <= 3'd7;
//            if (j) begin
//              state_q <= B_OUTER_HEAD;
//            end else begin
//              state_q <= A_OUTER_TEST;
//            end
//          end
//          B_OUTER_HEAD: begin
//            o <= b;
//            if (i) begin
//              state_q <= A_OUTER_TEST;
//            end else if (j) begin
//              x <= x - 3'd1;
//            end else begin
//              state_q <= B_INNER_TEST;
//            end
//          end
//          B_INNER_TEST: begin
//            x <= -x;
//            if (j) begin
//              state_q <= B_INNER_HEAD;
//            end else begin
//              state_q <= B_OUTER_LAST;
//            end
//          end
//          B_INNER_HEAD: begin
//            o <= ~b;
//            if (i) begin
//              state_q <= B_OUTER_LAST;
//            end else if (j) begin
//              x <= x - 3'd2;
//            end else begin
//              state_q <= B_INNER_NEXT;
//            end
//          end
//          B_INNER_NEXT: begin
//            o <= 1'd1;
//            x <= x - 3'd2;
//            if (j) begin
//              state_q <= B_INNER_HEAD;
//            end else begin
//              state_q <= B_OUTER_LAST;
//            end
//          end
//          /* B_OUTER_LAST */ default: begin
//            x <= x - 3'd1;
//            if (j) begin
//              state_q <= B_OUTER_HEAD;
//            end else begin
//              state_q <= A_OUTER_TEST;
//            end
//          end
//        endcase
//      end
//    end
//
// endmodule
// }}}
// @stats/control_for_07/states: 12
