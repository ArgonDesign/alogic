fsm control_call_05 {
  out u4 o = 0;

  bool rec = false;

  (*reclimit = 2*)
  void main() {
    if (!rec) {
      o += 1;
      rec = true;
      main(); // Main width explicit return point as well as the entry call
      o += 3;
      rec = false;
      return;
    } else {
      o += 2;
      return;
    }
  }
}
// Note: The above compiles into a stack machine, but this is equivalent
// @fec/golden {{{
//  module control_call_05(
//    input wire       clk,
//    input wire       rst,
//    output reg [3:0] o
//  );
//    reg [2:0] state_q;
//
//    always @(posedge clk) begin
//      if (rst) begin
//        state_q <= 3'b0;
//        o <= 4'd0;
//      end else begin
//        case (state_q)
//          3'd0: begin // 'main' entry
//            state_q <= 3'd1;
//            o <= o + 4'd1;
//          end
//          3'd1: begin // 'main' recursive
//            state_q <= 3'd2;
//            o <= o + 4'd2;
//          end
//          default: begin // 'main' entry return after recursive return
//            state_q <= 3'd0;
//            o <= o + 4'd3;
//          end
//        endcase
//      end
//    end
//
//  endmodule
// }}}
// @stats/$TEST_FILE|control_call_05|stack-depth: 1
// @stats/$TEST_FILE|control_call_05|states: 2
