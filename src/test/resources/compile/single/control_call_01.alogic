// @args: --no-assertions
fsm control_call_01 {
  out u4 o = 0;

  void main() {
    f();
    f();
  }

  void f() {
    o += 2;
    g();
    g();
  }

  void g() {
    o += 1;
    return;
  }
}
// Note: The above compiles into a stack machine, but this is equivalent
// @fec/golden {{{
//  module control_call_01(
//    input wire       clk,
//    input wire       rst,
//    output reg [3:0] o
//  );
//    reg [2:0] state_q;
//
//    always @(posedge clk) begin
//      if (rst) begin
//        state_q <= 3'b0;
//        o <= 4'd0;
//      end else begin
//        state_q <= state_q + 3'd1;
//        case (state_q)
//          3'd0: ;
//          3'd1: o <= o + 4'd2;  // 1st in 'f'
//          3'd2: o <= o + 4'd1;  // 1st in 'g'
//          3'd3: o <= o + 4'd1;  // 2nd in 'g'
//          3'd4: o <= o + 4'd2;  // 2nd in 'f'
//          3'd5: o <= o + 4'd1;  // 3rd in 'g'
//          default: begin        // 4th in 'g' 
//            o <= o + 4'd1;
//            state_q <= 3'd0;
//          end
//        endcase
//      end
//    end
//
//  endmodule
// }}}
// @stats/control_call_01.control_call_01/stack-depth: 2
// @stats/control_call_01.control_call_01/states: 3
